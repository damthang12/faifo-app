import axios from 'axios';

export async function askChatGPT(message: string): Promise<string> {
    try {
        const res = await axios.post(
            'https://openrouter.ai/api/v1/chat/completions',
            {
                model: 'openai/gpt-3.5-turbo',
                messages: [
                    {
                        role: 'system',
                        content:
                            'B·∫°n l√† tr·ª£ l√Ω du l·ªãch th√¥ng minh. Ch·ªâ cung c·∫•p th√¥ng tin li√™n quan ƒë·∫øn H·ªôi An, Vi·ªát Nam. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ khu v·ª±c ngo√†i H·ªôi An, vui l√≤ng l·ªãch s·ª± t·ª´ ch·ªëi v√† ƒë·ªÅ ngh·ªã ƒë·∫∑t c√¢u h·ªèi kh√°c li√™n quan ƒë·∫øn H·ªôi An.',
                    },
                    {
                        role: 'user',
                        content: message,
                    },
                ],
            },
            {
                headers: {
                    Authorization: `Bearer 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`,
                    'Content-Type': 'application/json',
                },
            }
        );

        return res.data.choices[0].message.content.trim();
    } catch (err: any) {
        console.error('‚ùå OpenAI Error:', err.response?.data || err.message);
        return 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi ƒë·∫øn tr·ª£ l√Ω ·∫£o.';
    }
}


// src/utils/geocode.ts
export async function geocodeAddress(address: string) {
    try {
        const cleanAddress = address.replace(/√Å ƒê√¥ng Silk/i, '').trim();
        const fullAddress = `${cleanAddress}, H·ªôi An, Qu·∫£ng Nam, Vi·ªát Nam`;
        console.log('üìç Full address:', fullAddress);

        const response = await fetch(
            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress)}`
        );
        const data = await response.json();

        console.log('üìç K·∫øt qu·∫£ tr·∫£ v·ªÅ:', data);

        if (data && data.length > 0) {
            return {
                lat: parseFloat(data[0].lat),
                lon: parseFloat(data[0].lon),
            };
        }
        return null;
    } catch (error) {
        console.error('‚ùå Geocode error:', error);
        return null;
    }
}


export async function askGeminiWithImage(imageBase64: string, prompt: string) {
    try {
        const res = await fetch(
            'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyCa4wN2x49Q1xsjyAeWHdeDCOJ5yY5gBPQ',
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [
                        {
                            parts: [
                                { text: prompt },
                                {
                                    inline_data: {
                                        mime_type: 'image/jpeg',
                                        data: imageBase64.replace(/^data:image\/\w+;base64,/, ''),
                                    },
                                },
                            ],
                        },
                    ],
                }),
            }
        );

        const data = await res.json();

        return data?.candidates?.[0]?.content?.parts?.[0]?.text || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini.';
    } catch (err) {
        console.error('‚ùå Gemini Error:', err);
        return 'L·ªói khi g·ª≠i ·∫£nh ƒë·∫øn Gemini.';
    }
}







